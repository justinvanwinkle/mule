(eval-when (:compile-toplevel :load-toplevel :execute)(unless (find-package "defun.py")(make-package "defun.py")(use-package "builtins")))
;(proclaim '(optimize (space 0) (safety 0) (speed 3)))
(DEFUN |test_no_return| (|x|  ) (RETURN-FROM |test_no_return| NIL))
(DEFUN |test_implicit_return| (|x|  ) NIL)
(DEFUN |test_both| (|x|  ) (COND ((|__eq__| |x| 1) (RETURN-FROM |test_both| |x|)) ((|__eq__| |x| 2) (RETURN-FROM |test_both| NIL))))
(ASSERT (|__eq__| (|test_no_return| 1 ) NIL) )
(ASSERT (|__eq__| (|test_implicit_return| 1 ) NIL) )
(ASSERT (|__eq__| (|test_both| 1 ) 1) )
(ASSERT (|__eq__| (|test_both| 2 ) NIL) )
(ASSERT (|__eq__| (|test_both| 3 ) NIL) )
(DEFUN |test| (|x|  ) (RETURN-FROM |test| (+ |x| 1)))
(DEFUN |test2| (|x| |y|  ) (LET ((|z| (+ |x| |y|))) (RETURN-FROM |test2| |z|)))
(DEFUN |test3| (|x|  ) (|test| 1 )
(|test2| 5 7 )
(RETURN-FROM |test3| (+ (|test| 1 ) 55)))
(DEFUN |test_outer| (|x|  ) (FLET ((|test_inner| (|y|  ) (RETURN-FROM |test_inner| (+ |y| 1)))) (RETURN-FROM |test_outer| (|test_inner| (+ |x| 1) ))))
(ASSERT (|__eq__| (|test| 5 ) 6) )
(ASSERT (|__eq__| (|test2| 1 2 ) 3) )
(ASSERT (|__eq__| (|test3| 1 ) 57) )
(ASSERT (|__eq__| (|test_outer| 5 ) 7) )
(LOOP FOR S BEING EACH PRESENT-SYMBOL IN *PACKAGE*
   WHEN (OR (FBOUNDP S) (BOUNDP S) (FIND-CLASS S NIL))
   DO (EXPORT S))

