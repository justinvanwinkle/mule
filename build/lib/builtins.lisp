
(EVAL-WHEN (:COMPILE-TOPLEVEL)
  (SETF *READTABLE* (COPY-READTABLE NIL))
  (SETF (READTABLE-CASE *READTABLE*) :PRESERVE))
(DEFPACKAGE "builtins"
  (:USE "CL" "SB-EXT"))
(IN-PACKAGE "builtins")
(DEFCLASS dict NIL (hash_table))
(DEFMETHOD init ((self dict))
  (SETF (SLOT-VALUE self 'hash_table) (MAKE-HASH-TABLE :TEST 'EQUALP)))
(DEFMETHOD setitem ((self dict) key value)
  (SETF (GETHASH key (SLOT-VALUE self 'hash_table)) value))
(DEFMETHOD getitem ((self dict) key)
  (RETURN-FROM getitem (GETHASH key (SLOT-VALUE self 'hash_table))))
(DEFUN dict ()
  (LET ((self (MAKE-INSTANCE 'dict)))
    (init self)
    self))
(DEFCLASS list (SEQUENCE STANDARD-OBJECT) (array))
(DEFMETHOD init ((self list))
  (SETF (SLOT-VALUE self 'array) (MAKE-ARRAY 0 :ADJUSTABLE T :FILL-POINTER T)))
(DEFMETHOD setitem ((self list) key value)
  (SETF (SLOT-VALUE self 'array) value))
(DEFMETHOD getitem ((self list) key) (AREF (SLOT-VALUE self 'array) key))
(DEFMETHOD append ((self list) val)
  (VECTOR-PUSH-EXTEND val (SLOT-VALUE self 'array)))
(DEFMETHOD SB-SEQUENCE:LENGTH ((self list))
  (RETURN-FROM SB-SEQUENCE:LENGTH (LENGTH (SLOT-VALUE self 'array))))
(DEFMETHOD SB-SEQUENCE:ELT ((self list) index)
  (RETURN-FROM SB-SEQUENCE:ELT (getitem self index)))
(DEFMETHOD MAKE-SEQUENCE-ITERATOR
           ((self list) &KEY (FROM-END NIL) (START NIL) (END NIL))
  (RETURN-FROM MAKE-SEQUENCE-ITERATOR
    (MAKE-SEQUENCE-ITERATOR (SLOT-VALUE self 'array) :FROM-END FROM-END :START
     START :END END)))
(DEFUN list ()
  (LET ((self (MAKE-INSTANCE 'list)))
    (init self)
    self))