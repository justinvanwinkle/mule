(eval-when (:compile-toplevel :load-toplevel :execute)(unless (find-package "builtins")(make-package "builtins")(use-package "builtins")))
;(proclaim '(optimize (space 0) (safety 0) (speed 3)))
#| `(defgeneric __hash__ (a))`
|#
#| `(defgeneric __eq__ (a b))`
|#
(DEFMETHOD |__hash__| (|a|  ) (RETURN-FROM |__hash__| (|SXHASH| |a| )))
(DEFMETHOD |__eq__| (|a| |b|  ) (RETURN-FROM |__eq__| (|EQUALP| |a| |b| )))
(|DEFINE-HASH-TABLE-TEST| |__eq__| |__hash__| )
(CL:EXPORT '(|__eq__| |__hash__|))
(|IN-PACKAGE| "builtins" )
#|use CL
|#
(CL:IMPORT '(|CL|:|AND|))
(CL:IMPORT '(|CL|:|ASSERT|))
(CL:IMPORT '(|CL|:|BOUNDP|))
(CL:IMPORT '(|CL|:|BYTE|))
(CL:IMPORT '(|CL|:|COND|))
(CL:IMPORT '(|CL|:|COPY-SEQ|))
(CL:IMPORT '(|CL|:|DEFCLASS|))
(CL:IMPORT '(|CL|:|DEFMETHOD|))
(CL:IMPORT '(|CL|:|DEFPARAMETER|))
(CL:IMPORT '(|CL|:|DEFUN|))
(CL:IMPORT '(|CL|:|ELT|))
(CL:IMPORT '(|CL|:|EXPORT|))
(CL:IMPORT '(|CL|:|FBOUNDP|))
(CL:IMPORT '(|CL|:|FIND-CLASS|))
(CL:IMPORT '(|CL|:|FIXNUM|))
(CL:IMPORT '(|CL|:|FUNCTION|))
(CL:IMPORT '(|CL|:|GETHASH|))
(CL:IMPORT '(|CL|:|HASH-TABLE-COUNT|))
(CL:IMPORT '(|CL|:|LDB|))
(CL:IMPORT '(|CL|:|LET|))
(CL:IMPORT '(|CL|:|LENGTH|))
(CL:IMPORT '(|CL|:|LIST|))
(CL:IMPORT '(|CL|:|LOGXOR|))
(CL:IMPORT '(|CL|:|LOOP|))
(CL:IMPORT '(|CL|:|MAKE-ARRAY|))
(CL:IMPORT '(|CL|:|MAKE-HASH-TABLE|))
(CL:IMPORT '(|CL|:|MAKE-INSTANCE|))
(CL:IMPORT '(|CL|:|MOD|))
(CL:IMPORT '(|CL|:|NOT|))
(CL:IMPORT '(|CL|:|NUMBER|))
(CL:IMPORT '(|CL|:|OR|))
(CL:IMPORT '(|CL|:|QUOTE|))
(CL:IMPORT '(|CL|:|REAL|))
(CL:IMPORT '(|CL|:|RETURN-FROM|))
(CL:IMPORT '(|CL|:|ROUND|))
(CL:IMPORT '(|CL|:|SEQUENCE|))
(CL:IMPORT '(|CL|:|SETF|))
(CL:IMPORT '(|CL|:|SORT|))
(CL:IMPORT '(|CL|:|STABLE-SORT|))
(CL:IMPORT '(|CL|:|SLOT-VALUE|))
(CL:IMPORT '(|CL|:|STANDARD-OBJECT|))
(CL:IMPORT '(|CL|:|STRING|))
(CL:IMPORT '(|CL|:|SXHASH|))
(CL:IMPORT '(|CL|:|VECTOR-PUSH-EXTEND|))
(CL:IMPORT '(|CL|:|T|))
(CL:IMPORT '(|CL|:|NIL|))
(CL:IMPORT '(|CL|:*PACKAGE*))
(CL:IMPORT '(|CL|:>))
(CL:IMPORT '(|CL|:<))
(CL:IMPORT '(|CL|:*))
(CL:IMPORT '(|CL|:-))
(CL:IMPORT '(|CL|:STRING=))
(CL:IMPORT '(|SEQUENCE|:|MAKE-SEQUENCE-ITERATOR|))
(CL:IMPORT '(|CL-USER|:|__eq__|))
(CL:IMPORT '(|CL-USER|:|__hash__|))
(CL:EXPORT '(|AND| |OR|))
(DEFUN |hash| (|a|  ) (RETURN-FROM |hash| (|__hash__| |a| )))
(DEFMETHOD |len| (|a|  ) (RETURN-FROM |len| (|LENGTH| |a| )))
(DEFMETHOD |sorted| (|lst|  ) (RETURN-FROM |sorted| (|SORT| (|COPY-SEQ| |lst| ) #'|__cmp__| )))
(DEFMETHOD |__cmp__| (|a| |b|  ) (RETURN-FROM |__cmp__| (< (|SXHASH| |a| ) (|SXHASH| |b| ))))
(DEFMETHOD |__cmp__| ((|a| |NUMBER|) (|b| |NUMBER|)  ) (RETURN-FROM |__cmp__| (< |a| |b|)))
(DEFMETHOD |__eq__| ((|a| |REAL|) (|b| |FIXNUM|)  ) (RETURN-FROM |__eq__| (AND (NOT (> |a| |b|) ) (NOT (< |a| |b|) ))))
(DEFMETHOD |__eq__| ((|a| |FIXNUM|) (|b| |REAL|)  ) (RETURN-FROM |__eq__| (AND (NOT (> |a| |b|) ) (NOT (< |a| |b|) ))))
(DEFMETHOD |__hash__| ((|a| |FIXNUM|)  ) (RETURN-FROM |__hash__| |a|))
(DEFMETHOD |__hash__| ((|a| |REAL|)  ) (LET ((|int_part| (|ROUND| |a| ))) (COND ((|__eq__| |int_part| |a|) (RETURN-FROM |__hash__| |int_part|)))
(RETURN-FROM |__hash__| (|SXHASH| |a| ))))
(DEFCLASS |object| (|STANDARD-OBJECT|) NIL) (DEFMETHOD |__repr__| ((|self| |object|)   ) (RETURN-FROM |__repr__| (|str| ""))) (DEFUN |object| (  ) (LET ((|self| (make-instance '|object|))) |self|))
(DEFCLASS |dict| (|SEQUENCE| |object|) (|hash_table|)) (DEFMETHOD |len| ((|self| |dict|)   ) (RETURN-FROM |len| (|HASH-TABLE-COUNT| (SLOT-VALUE |self| '|hash_table|) ))) (DEFMETHOD |keys| ((|self| |dict|)   ) (LET ((|hashtable| (SLOT-VALUE |self| '|hash_table|))) (LET ((|lst| (|list|  ))) (loop for key being the hash-keys of |hashtable|
             do (|append| |lst| key))
(RETURN-FROM |keys| |lst|)))) (DEFMETHOD |setitem| ((|self| |dict|) |key| |value|  ) (|SETF| (|GETHASH| |key| (SLOT-VALUE |self| '|hash_table|) ) |value| )) (DEFMETHOD |getitem| ((|self| |dict|) |key|  ) (RETURN-FROM |getitem| (|GETHASH| |key| (SLOT-VALUE |self| '|hash_table|) ))) (DEFMETHOD |MAKE-SEQUENCE-ITERATOR| ((|self| |dict|)  CL:&KEY (|FROM-END| NIL)(|START| 0)(|END| NIL) ) (RETURN-FROM |MAKE-SEQUENCE-ITERATOR| (|MAKE-SEQUENCE-ITERATOR| (SLOT-VALUE |self| '|hash_table|) :|FROM-END| |FROM-END| :|START| |START| :|END| |END|))) (DEFUN |dict| (  CL:&REST |args|) (LET ((|self| (make-instance '|dict|))) (SETF (SLOT-VALUE |self| '|hash_table|) (|MAKE-HASH-TABLE|  :|TEST| (|QUOTE| |__eq__| )))
|self|))
(DEFCLASS |list| (|SEQUENCE| |object|) (|array|)) (DEFMETHOD |__eq__| ((|self| |list|) |other|  ) (COND ((not (|__eq__| (|len| |self| ) (|len| |other| ))) (RETURN-FROM |__eq__| nil)))
(LOOP FOR |i| FROM 0 BELOW (|len| |self| ) BY 1 DO (COND ((not (|__eq__| (|getitem| |self| |i|) (|getitem| |other| |i|))) (RETURN-FROM |__eq__| nil))))
(RETURN-FROM |__eq__| t)) (DEFMETHOD |__hash__| ((|self| |list|)   ) (RETURN-FROM |__hash__| 1)) (DEFMETHOD |sort| ((|self| |list|) |order|  ) (|STABLE-SORT| (SLOT-VALUE |self| '|array|) |order| )) (DEFMETHOD |sorted| ((|self| |list|)   ) (RETURN-FROM |sorted| (|list| (|SORT| (|COPY-SEQ| (SLOT-VALUE |self| '|array|) ) (|FUNCTION| |__cmp__| ) ) ))) (DEFMETHOD |len| ((|self| |list|)   ) (RETURN-FROM |len| (|LENGTH| (SLOT-VALUE |self| '|array|) ))) (DEFMETHOD |setitem| ((|self| |list|) |key| |value|  ) (|SETF| (|ELT| (SLOT-VALUE |self| '|array|) |key| ) |value| )) (DEFMETHOD |getitem| ((|self| |list|) |key|  ) (RETURN-FROM |getitem| (|ELT| (SLOT-VALUE |self| '|array|) |key| ))) (DEFMETHOD |append| ((|self| |list|) |val|  ) (|VECTOR-PUSH-EXTEND| |val| (SLOT-VALUE |self| '|array|) )) (DEFMETHOD SEQUENCE:LENGTH ((|self| |list|)   ) (RETURN-FROM SEQUENCE:LENGTH (|LENGTH| (SLOT-VALUE |self| '|array|) ))) (DEFMETHOD SEQUENCE:ELT ((|self| |list|) |index|  ) (RETURN-FROM SEQUENCE:ELT (|getitem| |self| |index| ))) (DEFMETHOD |MAKE-SEQUENCE-ITERATOR| ((|self| |list|)  CL:&KEY (|FROM-END| NIL)(|START| 0)(|END| NIL) ) (RETURN-FROM |MAKE-SEQUENCE-ITERATOR| (|MAKE-SEQUENCE-ITERATOR| (SLOT-VALUE |self| '|array|) :|FROM-END| |FROM-END| :|START| |START| :|END| |END|))) (DEFUN |list| (  CL:&REST |args|) (LET ((|self| (make-instance '|list|))) (SETF (SLOT-VALUE |self| '|array|) (|MAKE-ARRAY| 0 :|ADJUSTABLE| t :|FILL-POINTER| t))
(LOOP FOR |lst| BEING THE ELEMENTS OF |args| DO (LOOP FOR |x| BEING THE ELEMENTS OF |lst| DO (|append| |self| |x| )))
|self|))
(DEFCLASS |tuple| (|list|) (|array|)) (DEFMETHOD |__hash__| ((|self| |tuple|)   ) (LET ((|value| #x345678)) (LOOP FOR |item| BEING THE ELEMENTS OF (SLOT-VALUE |self| '|array|) DO (CL:PROGN (SETF |value| (MOD |value| 295147905179352825856))
(SETF |value| (LOGXOR (MOD (* 1000003 |value|) 295147905179352825856) (|__hash__| |item| )))))
(SETF |value| (LOGXOR |value| (|len| |self| )))
(COND ((|__eq__| |value| (- 1 )) (SETF |value| (- 2 ))))
(SETF |value| (MOD |value| 295147905179352825856))
(RETURN-FROM |__hash__| (|LDB| (|BYTE| 62 0 ) |value| )))) (DEFMETHOD |setitem| ((|self| |tuple|) |key| |value|  ) (|SETF| (|ELT| (SLOT-VALUE |self| '|array|) |key| ) |value| )) (DEFMETHOD |getitem| ((|self| |tuple|) |key|  ) (RETURN-FROM |getitem| (|ELT| (SLOT-VALUE |self| '|array|) |key| ))) (DEFMETHOD |append| ((|self| |tuple|) |val|  ) (|VECTOR-PUSH-EXTEND| |val| (SLOT-VALUE |self| '|array|) )) (DEFUN |tuple| (  CL:&REST |args|) (LET ((|self| (make-instance '|tuple|))) (SETF (SLOT-VALUE |self| '|array|) (|MAKE-ARRAY| 0 :|ADJUSTABLE| t :|FILL-POINTER| t))
(LOOP FOR |lst| BEING THE ELEMENTS OF |args| DO (LOOP FOR |x| BEING THE ELEMENTS OF |lst| DO (|append| |self| |x| )))
|self|))
(DEFCLASS |str| (|SEQUENCE| |object|) (|_str|)) (DEFMETHOD |len| ((|self| |str|)   ) (RETURN-FROM |len| (|LENGTH| (SLOT-VALUE |self| '|_str|) ))) (DEFMETHOD |__eq__| ((|self| |str|) (|other| |str|)  ) (RETURN-FROM |__eq__| (STRING= (SLOT-VALUE |self| '|_str|) (SLOT-VALUE |other| '|_str|) ))) (DEFMETHOD |__eq__| ((|self| |str|) (|other| |STRING|)  ) (RETURN-FROM |__eq__| (STRING= (SLOT-VALUE |self| '|_str|) |other| ))) (DEFMETHOD |__eq__| ((|a| |STRING|) (|other| |str|)  ) (RETURN-FROM |__eq__| (|__eq__| |other| |a|))) (DEFMETHOD |__cmp__| ((|self| |str|) (|other| |str|)  ) (RETURN-FROM |__cmp__| (STRING< (SLOT-VALUE |self| '|_str|) (SLOT-VALUE |other| '|_str|) ))) (DEFMETHOD |__cmp__| ((|self| |str|) (|other| |STRING|)  ) (RETURN-FROM |__cmp__| (STRING< (SLOT-VALUE |self| '|_str|) (SLOT-VALUE |other| '|_str|) ))) (DEFMETHOD |getitem| ((|self| |str|) |key|  ) (RETURN-FROM |getitem| (|ELT| (SLOT-VALUE |self| '|array|) |key| ))) (DEFMETHOD SEQUENCE:LENGTH ((|self| |str|)   ) (RETURN-FROM SEQUENCE:LENGTH (|LENGTH| (SLOT-VALUE |self| '|_str|) ))) (DEFMETHOD SEQUENCE:ELT ((|self| |str|) |index|  ) (RETURN-FROM SEQUENCE:ELT (|getitem| |self| |index| ))) (DEFMETHOD |MAKE-SEQUENCE-ITERATOR| ((|self| |str|)  CL:&KEY (|FROM-END| NIL)(|START| 0)(|END| NIL) ) (RETURN-FROM |MAKE-SEQUENCE-ITERATOR| (|MAKE-SEQUENCE-ITERATOR| (SLOT-VALUE |self| '|_str|) :|FROM-END| |FROM-END| :|START| |START| :|END| |END|))) (DEFUN |str| (|str|  ) (LET ((|self| (make-instance '|str|))) (SETF (SLOT-VALUE |self| '|_str|) |str|)
|self|))
(LOOP FOR S BEING EACH PRESENT-SYMBOL IN *PACKAGE*
   WHEN (OR (FBOUNDP S) (BOUNDP S) (FIND-CLASS S NIL))
   DO (EXPORT S))

