
class dict:
    __slots__ = ('hash_table',)

    def __init__(self, val):
        self.hash_table = `MAKE-HASH-TABLE`(TEST=QUOTE(EQUALP))

    def setitem(self, key, value):
        SETF(GETHASH(key, self.hash_table), value)

    def getitem(self, key):
        return GETHASH(key, self.hash_table)


class list(SEQUENCE, `STANDARD-OBJECT`):
    __slots__ = ('array',)
    def __init__(self, val):
        self.array = `MAKE-ARRAY`(0, ADJUSTABLE=True, `FILL-POINTER`=True)

    def setitem(self, key, value):
        SETF(AREF(self.array, key), value)

    def getitem(self, key):
        return AREF(self.array, key)

    def append(self, val):
        `VECTOR-PUSH-EXTEND`(val, self.array)

    def `SEQUENCE:LENGTH`(self):
        return LENGTH(self.array)

    def `SEQUENCE:ELT`(self, index):
        return self.getitem(index)

    def `MAKE-SEQUENCE-ITERATOR`(self, `FROM-END`=None, START=None, END=None):
        return `MAKE-SEQUENCE-ITERATOR`(self.array, `FROM-END`=`FROM-END`, START=START, END=END)


class tuple(SEQUENCE, `STANDARD-OBJECT`):
    __slots__ = ('array',)

    def __init__(self, val):
        pass
