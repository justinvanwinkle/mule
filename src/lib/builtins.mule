#!/usr/bin/env python

class dict:
    def __init__(self, *args):
        self.hash_table = MAKE_HASH_TABLE(TEST=QUOTE(EQUALP))

    def setitem(self, key, value):
        SETF(GETHASH(key, self.hash_table), value)

    def getitem(self, key):
        return GETHASH(key, self.hash_table)


class list(SEQUENCE, STANDARD_OBJECT):
    def __init__(self, *args):
        self.array = MAKE_ARRAY(0, ADJUSTABLE=True, FILL_POINTER=True)
        for lst in args:
            for x in lst:
                self.append(x)

    def setitem(self, key, value):
        SETF(ELT(self.array, key), value)

    def getitem(self, key):
        return ELT(self.array, key)

    def append(self, val):
        VECTOR_PUSH_EXTEND(val, self.array)

    def `SEQUENCE:LENGTH`(self):
        return LENGTH(self.array)

    def `SEQUENCE:ELT`(self, index):
        return self.getitem(index)

    def MAKE_SEQUENCE_ITERATOR(self, FROM_END=None, START=None, END=None):
        return MAKE_SEQUENCE_ITERATOR(self.array,
                                      FROM_END=FROM_END,
                                      START=START,
                                      END=END)


class tuple(SEQUENCE, STANDARD_OBJECT):
    def __init__(self, *args):
        self.array = MAKE_ARRAY(0, ADJUSTABLE=True, FILL_POINTER=True)
        for lst in args:
            for x in lst:
                self.append(x)

    def setitem(self, key, value):
        SETF(ELT(self.array, key), value)

    def getitem(self, key):
        return ELT(self.array, key)

    def append(self, val):
        VECTOR_PUSH_EXTEND(val, self.array)

    def `SEQUENCE:LENGTH`(self):
        return LENGTH(self.array)

    def `SEQUENCE:ELT`(self, index):
        return self.getitem(index)

    def MAKE_SEQUENCE_ITERATOR(self, FROM_END=None, START=None, END=None):
        return MAKE_SEQUENCE_ITERATOR(self.array,
                                      FROM_END=FROM_END,
                                      START=START,
                                      END=END)
